{"version":3,"sources":["components/Calculator.js","containers/Contentbox.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["Calculator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","idealWeight","calculateWeight","bind","assertThisInitialized","y","_newServing","value","z","_newCarbs","n","_newDesiredCarbs","toFixed","setState","concat","_this2","react_default","a","createElement","className","type","id","name","ref","input","onClick","Component","Contentbox","components_Calculator","App","users","containers_Contentbox","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_containers_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a5395cce.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Calculator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      idealWeight: 'Pending Calculation'\n    }\n    this.calculateWeight = this.calculateWeight.bind(this);\n  }\n\n  calculateWeight() {\n    let y = this._newServing.value;\n    let z = this._newCarbs.value;\n    let x = this._newDesiredCarbs.value;\n    let n = ((y*x)/z).toFixed(2);\n    this.setState ({\n       idealWeight: `${n}g`\n     });\n  }\n\n\n  render () {\n    return (\n      <div className=\"calculator-container\">\n        <h2>Calculator</h2>\n        <div className=\"calculator-content\">\n          <form>\n            <div className=\"form-row\">\n              <label>Item Serving Size (in grams):</label>\n              <input type=\"number\" id=\"info-serving-size\" name=\"item-serving-size\" ref={input => this._newServing = input}/>\n            </div>\n            <div className=\"form-row\">\n              <label>Item Carbs:</label>\n              <input type=\"number\" id=\"info-carbs\" name=\"item-carbs\" ref={input => this._newCarbs = input}/>\n            </div>\n            <div className=\"form-row\">\n              <label>Desired Carbs:</label>\n              <input type=\"number\" id=\"desired-carbs\" name=\"item-desired-carbs\" ref={input => this._newDesiredCarbs = input}/>\n            </div>\n          </form>\n          <div className=\"button\">\n            <button onClick={this.calculateWeight}>Calculate</button>\n          </div>\n          <p>Ideal Weight&#58; {this.state.idealWeight}</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Calculator;\n","import React, { Component } from 'react';\nimport Calculator from '../components/Calculator';\n\nclass Contentbox extends Component {\n  render() {\n    return (\n      <div className=\"contentbox-wrapper\">\n        <h1>Carb Calculator</h1>\n        <div className=\"contentbox\">\n          <Calculator />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Contentbox;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Contentbox from '../containers/Contentbox';\n\nclass App extends Component {\n  state= {\n    users: []\n  };\n\n  // componentDidMount() {\n  //   fetch('/users')\n  //     .then(res => res.json())\n  //     .then(users => this.setState({ users }));\n  // }\n\n  render() {\n    return (\n      <div id=\"background\">\n          <Contentbox />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './containers/css/main.css'\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}